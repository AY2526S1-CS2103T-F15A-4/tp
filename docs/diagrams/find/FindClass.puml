@startuml
hide circle
skinparam classAttributeIconSize 0

Class "{abstract}\nCommand" as Command {
  +execute(Model): CommandResult
}

Class FindCommand {
  +COMMAND_WORD: String
  +MESSAGE_USAGE: String
  -predicate: PredicatePerson
  +execute(model: Model): CommandResult
}

Class FindCommandParser {
  +parse(args: String): FindCommand
}

Class "<<interface>>\nPredicate~Person~" as PredicatePerson {
  +test(person: Person): boolean
}

Class Person
Class "<<interface>>\nModel" as Model
Class NameContainsKeywordsPredicate
Class AddressContainsKeywordsPredicate
Class RelationContainsKeywordPredicate
Class TagContainsKeywordsPredicate
Class TransactionContainsKeywordPredicate

Class ModelManager {
  -filteredPersons: FilteredList<Person>
  +updateFilteredPersonList(predicate: Predicate<Person>): void
}

ModelManager ..|> Model : implements
ModelManager --> Person : manages

FindCommand -up-|> Command
NameContainsKeywordsPredicate ..> Person : tests
AddressContainsKeywordsPredicate ..> Person : tests
RelationContainsKeywordPredicate ..> Person : tests
TagContainsKeywordsPredicate ..> Person : tests
TransactionContainsKeywordPredicate ..> Person : tests

PredicatePerson <|.. NameContainsKeywordsPredicate : implements
PredicatePerson <|.. AddressContainsKeywordsPredicate : implements
PredicatePerson <|.. TagContainsKeywordsPredicate : implements
PredicatePerson <|.. RelationContainsKeywordPredicate : implements
PredicatePerson <|.. TransactionContainsKeywordPredicate : implements

FindCommandParser ..> FindCommand : creates
FindCommandParser ..> NameContainsKeywordsPredicate : creates
FindCommandParser ..> AddressContainsKeywordsPredicate : creates
FindCommandParser ..> TagContainsKeywordsPredicate : creates
FindCommandParser ..> RelationContainsKeywordPredicate : creates
FindCommandParser ..> TransactionContainsKeywordPredicate : creates

FindCommand --> PredicatePerson : uses
FindCommand ..> Model : interacts with

@enduml
